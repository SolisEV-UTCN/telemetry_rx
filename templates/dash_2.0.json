[
  {
    "apiVersion": "influxdata.com/v2alpha1",
    "kind": "Dashboard",
    "metadata": {
      "name": "amusing-black-83d001"
    },
    "spec": {
      "charts": [
        {
          "axes": [
            {
              "base": "10",
              "name": "x",
              "scale": "linear"
            },
            {
              "base": "10",
              "name": "y",
              "scale": "linear"
            }
          ],
          "colorizeRows": true,
          "colors": [
            {
              "id": "I6niYx8QtXzFAwu-OOZmf",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#31C0F6"
            },
            {
              "id": "OX3_8iMO0u-HAtbEaug7g",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#A500A5"
            },
            {
              "id": "2OqLf4P9Y4IyR7anv0geL",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#FF7E27"
            }
          ],
          "geom": "line",
          "height": 5,
          "hoverDimension": "auto",
          "kind": "Xy",
          "legendColorizeRows": true,
          "legendOpacity": 1,
          "legendOrientationThreshold": 100000000,
          "name": "Velocity",
          "opacity": 1,
          "orientationThreshold": 100000000,
          "position": "overlaid",
          "queries": [
            {
              "query": "from(bucket: \"test_bucket\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"solar_vehicle\")\r\n  |> filter(fn: (r) => r[\"ecu\"] == \"MotorController\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"MC_MotorVelocity\")\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {
            "colorizeRows": true,
            "opacity": 1,
            "orientationThreshold": 100000000,
            "widthRatio": 1
          },
          "width": 12,
          "widthRatio": 1,
          "xCol": "_time",
          "yCol": "_value"
        },
        {
          "axes": [
            {
              "base": "10",
              "name": "x",
              "scale": "linear"
            },
            {
              "base": "10",
              "name": "y",
              "scale": "linear"
            }
          ],
          "colorizeRows": true,
          "colors": [
            {
              "id": "I6niYx8QtXzFAwu-OOZmf",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#31C0F6"
            },
            {
              "id": "OX3_8iMO0u-HAtbEaug7g",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#A500A5"
            },
            {
              "id": "2OqLf4P9Y4IyR7anv0geL",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#FF7E27"
            }
          ],
          "geom": "line",
          "height": 5,
          "hoverDimension": "auto",
          "kind": "Xy",
          "legendColorizeRows": true,
          "legendOpacity": 1,
          "legendOrientationThreshold": 100000000,
          "name": "Min/Max Cell Temperature",
          "opacity": 1,
          "orientationThreshold": 100000000,
          "position": "overlaid",
          "queries": [
            {
              "query": "from(bucket: \"test_bucket\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"solar_vehicle\")\n  |> filter(fn: (r) => r[\"ecu\"] == \"BMU\")\n  |> filter(fn: (r) => r[\"_field\"] == \"BMU_MaxCellTemperature\" or r[\"_field\"] == \"BMU_MinCellTemperature\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {
            "colorizeRows": true,
            "opacity": 1,
            "orientationThreshold": 100000000,
            "widthRatio": 1
          },
          "width": 6,
          "widthRatio": 1,
          "xCol": "_time",
          "yCol": "_value",
          "yPos": 5
        },
        {
          "axes": [
            {
              "base": "10",
              "name": "x",
              "scale": "linear"
            },
            {
              "base": "10",
              "name": "y",
              "scale": "linear"
            }
          ],
          "colorizeRows": true,
          "colors": [
            {
              "id": "I6niYx8QtXzFAwu-OOZmf",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#31C0F6"
            },
            {
              "id": "OX3_8iMO0u-HAtbEaug7g",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#A500A5"
            },
            {
              "id": "2OqLf4P9Y4IyR7anv0geL",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#FF7E27"
            }
          ],
          "geom": "line",
          "height": 5,
          "hoverDimension": "auto",
          "kind": "Xy",
          "legendColorizeRows": true,
          "legendOpacity": 1,
          "legendOrientationThreshold": 100000000,
          "name": "MC Power Consumption",
          "opacity": 1,
          "orientationThreshold": 100000000,
          "position": "overlaid",
          "queries": [
            {
              "query": "import \"math\"\r\n\r\ndata = from(bucket: \"test_bucket\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"solar_vehicle\")\r\n  |> filter(fn: (r) => r[\"ecu\"] == \"MotorController\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"MC_Vd\" or r[\"_field\"] == \"MC_Vq\" or r[\"_field\"] == \"MC_Id\" or r[\"_field\"] == \"MC_Iq\")\r\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\r\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\r\n  |> map(fn: (r) => ({r with _value: r.MC_Vd * r.MC_Id + r.MC_Vq * r.MC_Iq}))\r\n  |> yield(name: \"power\")"
            }
          ],
          "staticLegend": {
            "colorizeRows": true,
            "opacity": 1,
            "orientationThreshold": 100000000,
            "widthRatio": 1
          },
          "width": 12,
          "widthRatio": 1,
          "xCol": "_time",
          "yCol": "_value",
          "yPos": 10
        },
        {
          "axes": [
            {
              "base": "10",
              "name": "x",
              "scale": "linear"
            },
            {
              "base": "10",
              "name": "y",
              "scale": "linear"
            }
          ],
          "colorizeRows": true,
          "colors": [
            {
              "id": "I6niYx8QtXzFAwu-OOZmf",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#31C0F6"
            },
            {
              "id": "OX3_8iMO0u-HAtbEaug7g",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#A500A5"
            },
            {
              "id": "2OqLf4P9Y4IyR7anv0geL",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#FF7E27"
            }
          ],
          "geom": "line",
          "height": 5,
          "hoverDimension": "auto",
          "kind": "Xy",
          "legendColorizeRows": true,
          "legendOpacity": 1,
          "legendOrientationThreshold": 100000000,
          "name": "BMU Power Consumption",
          "opacity": 1,
          "orientationThreshold": 100000000,
          "position": "overlaid",
          "queries": [
            {
              "query": "voltage = from(bucket: \"test_bucket\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"solar_vehicle\")\n  |> filter(fn: (r) => r[\"ecu\"] == \"BMU\")\n  |> filter(fn: (r) => r[\"_field\"] == \"BMU_BatteryVoltage\")\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\n  |> map(fn: (r) => ({r with _value: r[\"_value\"] / 1000.0}))\n  |> filter(fn: (r) => r[\"_value\"] <= 1000)\n  |> yield(name: \"volts\")\n\ncurrent = from(bucket: \"test_bucket\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"solar_vehicle\")\n  |> filter(fn: (r) => r[\"ecu\"] == \"BMU\")\n  |> filter(fn: (r) => r[\"_field\"] == \"BMU_BatteryCurrent\")\n  |> aggregateWindow(every: 1s, fn: mean, createEmpty: false)\n  |> map(fn: (r) => ({r with _value: r[\"_value\"] / 1000.0}))\n  |> filter(fn: (r) => r[\"_value\"] <= 1000)\n  |> yield(name: \"curr\")\n\njoin(tables: {t1: voltage, t2: current}, on: [\"_time\"])\n  |> map(fn: (r) => ({\n      _time: r._time,\n      _value: r._value_t1 * r._value_t2\n  }))\n  |> yield(name: \"power\")"
            }
          ],
          "staticLegend": {
            "colorizeRows": true,
            "opacity": 1,
            "orientationThreshold": 100000000,
            "widthRatio": 1
          },
          "width": 12,
          "widthRatio": 1,
          "xCol": "_time",
          "yCol": "_value",
          "yPos": 15
        },
        {
          "axes": [
            {
              "base": "10",
              "name": "x",
              "scale": "linear"
            },
            {
              "base": "10",
              "name": "y",
              "scale": "linear"
            }
          ],
          "colorizeRows": true,
          "colors": [
            {
              "id": "I6niYx8QtXzFAwu-OOZmf",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#31C0F6"
            },
            {
              "id": "OX3_8iMO0u-HAtbEaug7g",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#A500A5"
            },
            {
              "id": "2OqLf4P9Y4IyR7anv0geL",
              "name": "Nineteen Eighty Four",
              "type": "scale",
              "hex": "#FF7E27"
            }
          ],
          "geom": "line",
          "height": 5,
          "hoverDimension": "auto",
          "kind": "Xy",
          "legendColorizeRows": true,
          "legendOpacity": 1,
          "legendOrientationThreshold": 100000000,
          "name": "Min/Max Cell Voltage",
          "opacity": 1,
          "orientationThreshold": 100000000,
          "position": "overlaid",
          "queries": [
            {
              "query": "from(bucket: \"test_bucket\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"solar_vehicle\")\n  |> filter(fn: (r) => r[\"ecu\"] == \"BMU\")\n  |> filter(fn: (r) => r[\"_field\"] == \"BMU_MaxCellVoltage\" or r[\"_field\"] == \"BMU_MinCellVoltage\")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")"
            }
          ],
          "staticLegend": {
            "colorizeRows": true,
            "opacity": 1,
            "orientationThreshold": 100000000,
            "widthRatio": 1
          },
          "width": 6,
          "widthRatio": 1,
          "xCol": "_time",
          "xPos": 6,
          "yCol": "_value",
          "yPos": 5
        }
      ],
      "name": "Dash 2.0"
    }
  }
]
